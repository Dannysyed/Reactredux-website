[{"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\index.js":"1","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\App.js":"2","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Counter.js":"3","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\store\\index.js":"4","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Auth.js":"5","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\UserProfile.js":"6","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Header.js":"7","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\hook\\validationhook.js":"8","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Signin\\signin.js":"9","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\UI\\Modal\\modal.js":"10","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\context\\contextprovider.js":"11","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\context\\contextdata.js":"12"},{"size":273,"mtime":1646680323787,"results":"13","hashOfConfig":"14"},{"size":1386,"mtime":1647644758351,"results":"15","hashOfConfig":"14"},{"size":1312,"mtime":1647472016762,"results":"16","hashOfConfig":"14"},{"size":2286,"mtime":1647605982483,"results":"17","hashOfConfig":"14"},{"size":2774,"mtime":1647643090283,"results":"18","hashOfConfig":"14"},{"size":386,"mtime":1647627292935,"results":"19","hashOfConfig":"14"},{"size":792,"mtime":1647645230902,"results":"20","hashOfConfig":"14"},{"size":627,"mtime":1647601321786,"results":"21","hashOfConfig":"14"},{"size":2695,"mtime":1647626132292,"results":"22","hashOfConfig":"14"},{"size":663,"mtime":1645537221551,"results":"23","hashOfConfig":"14"},{"size":442,"mtime":1647626885994,"results":"24","hashOfConfig":"14"},{"size":155,"mtime":1647626645650,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ks3ndj",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\index.js",[],["54","55"],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\App.js",["56","57","58","59","60"],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Counter.js",[],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\store\\index.js",["61"],"import { createStore } from 'redux'\r\nimport { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\nlet counterstate =\r\n{\r\n    counter: 0,\r\n    isshown: true\r\n}\r\nlet authstate = {\r\n    IsAuthenticated: false\r\n}\r\nlet modelstate = {\r\n    showmodel: false\r\n}\r\nlet modelslice = createSlice({\r\n    name: 'model',\r\n    initialState: modelstate,\r\n    reducers: {\r\n        show(state) { state.showmodel = true },\r\n        Dontshow(state) { state.showmodel = false }\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet AuthSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: authstate,\r\n    reducers: {\r\n        login(state) { state.IsAuthenticated = true },\r\n        logout(state) { state.IsAuthenticated = false }\r\n    }\r\n})\r\nlet counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: counterstate,\r\n    reducers: {\r\n        increment(state) { state.counter = state.counter + 1 },\r\n        decrement(state) { state.counter-- },\r\n        increase(state, action) { state.counter = state.counter + action.payload },\r\n        toggler(state) { state.isshown = !state.isshown },\r\n\r\n    }\r\n})\r\nlet store = configureStore({\r\n    reducer: { counter: counterSlice.reducer, auth: AuthSlice.reducer, mode: modelslice.reducer }\r\n})\r\n// using redux as reducer\r\n\r\n// let Reducerfunction = (state = statedata, action) => {\r\n//     if (action.type == 'increment') {\r\n\r\n//         return { counter: state.counter + 1, isshown: state.isshown }\r\n//     }\r\n//     if (action.type == 'decrement') {\r\n//         return { counter: state.counter - 1, isshown: state.isshown }\r\n//     }\r\n//     if (action.type == 'custom') {\r\n//         return { counter: state.counter + action.payload, isshown: state.isshown }\r\n\r\n//     }\r\n//     if (action.type == 'toggle') {\r\n\r\n//         return { counter: state.counter, isshown: !state.isshown, }\r\n//     }\r\n\r\n\r\n//     return {\r\n//         counter: state.counter, isshown: state.isshown\r\n//     }\r\n// }\r\n// let store = createStore(Reducerfunction)\r\n\r\n// let subscriptionfn = () => {\r\n//     console.log(store.getState());\r\n\r\n// }\r\n// store.subscribe(subscriptionfn)\r\n// store.dispatch({ type: 'increment' })\r\nexport let counteraction = counterSlice.actions\r\nexport let authaction = AuthSlice.actions\r\nexport let modelaction = modelslice.actions\r\n\r\nexport default store","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Auth.js",["62","63","64","65","66","67","68"],"import { useContext, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Contextdata from '../context/contextdata';\nimport useValid from '../hook/validationhook';\nimport { authaction } from '../store';\nimport classes from './Auth.module.css';\n\nconst Auth = (prop) => {\n  //getting from provider\n  let esx = useContext(Contextdata)\n\n  let [statedata, getdata] = useState([])\n  let getapi = async function () {\n    let response = await fetch(`https://httppract-2693e-default-rtdb.asia-southeast1.firebasedatabase.app/signup.json`)\n    let data = await response.json()\n    console.log(data);\n    let newdata = []\n    for (const key in data) {\n      newdata.push({\n        id: data[key].id,\n        email: data[key].email,\n        password: data[key].password,\n        name: data[key].name\n      })\n\n    }\n    console.log(newdata);\n    getdata(newdata)\n\n  }\n\n\n\n  useEffect(() => {\n    getapi()\n  }, [])\n  let { value: emailvalue, valuehandle: emailvaluehandle, valueisinvalid: emailisinvalid, valueistouched: emailistouched, valueisvalid: emailisvalid, valuereset: emailisreset } = useValid(value => value.includes('@'))\n  let { value: passvalue, valuehandle: passvaluehandle, valueisinvalid: passisinvalid, valueistouched: passistouched, valueisvalid: passisvalid, valuereset: passisreset } = useValid(value => value.length > 5)\n  let formisvalid = false\n  // defining how to check the already data of users by using find method\n  let find = statedata.find(val => val.email == emailvalue)\n  //giving the value to provider\n  esx.getdatafrom(find)\n  console.log(find?.password);\n  if (find?.password == passvalue) {\n    // alert('succesfulloggin')\n    formisvalid = true\n\n\n  }\n  else {\n    let formisinvalid = false\n  }\n  let dispatch = useDispatch()\n\n\n  let submithandle = (e) => {\n    e.preventDefault()\n    console.log(emailvalue, passvalue);\n\n    dispatch(authaction.login())\n  }\n  return (\n    <main className={classes.auth}>\n      <section>\n        <form onSubmit={submithandle}>\n          <div className={classes.control}>\n            <label htmlFor='email'>Email</label>\n            <input type='email' id='email' onChange={emailvaluehandle} onBlur={emailistouched} />\n            {emailisinvalid && <p style={{ color: 'red' }}>Enter the correct email</p>}\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='password'>Password</label>\n            <input type='password' id='password' onChange={passvaluehandle} onBlur={passistouched} />\n            {passisinvalid && <p style={{ color: 'red' }}>Enter the correct password</p>}\n\n          </div>\n          <button onClick={prop.notrue} disabled={!formisvalid}>Login</button>\n        </form>\n      </section>\n    </main>\n  );\n};\n\nexport default Auth;\n","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\UserProfile.js",[],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Header.js",[],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\hook\\validationhook.js",[],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\Signin\\signin.js",["69","70","71","72","73","74","75"],"import { useDispatch, useSelector } from 'react-redux'\r\nimport useValid from '../../hook/validationhook'\r\nimport { modelaction } from '../../store'\r\nimport Modal from '../UI/Modal/modal'\r\nimport classes from './signin.module.css'\r\nlet Signin = (prop) => {\r\n    let show = useSelector(state => state.mode.showmodel)\r\n    let dispatch = useDispatch()\r\n    let modalhandle = () => {\r\n        dispatch(modelaction.Dontshow())\r\n    }\r\n    let { value: emailvalue, valuehandle: emailvaluehandle, valueisinvalid: emailisinvalid, valueistouched: emailistouched, valueisvalid: emailisvalid, valuereset: emailisreset } = useValid(value => value.includes('@'))\r\n    let { value: namevalue, valuehandle: namevaluehandle, valueisinvalid: nameisinvalid, valueistouched: nameistouched, valueisvalid: nameisvalid, valuereset: nameisreset } = useValid(value => value != \"\")\r\n    let { value: passvalue, valuehandle: passvaluehandle, valueisinvalid: passisinvalid, valueistouched: passistouched, valueisvalid: passisvalid, valuereset: passisreset } = useValid(value => value.length > 5)\r\n\r\n\r\n    let submithandle = (e) => {\r\n        e.preventDefault()\r\n        console.log(emailvalue, passvalue, namevalue);\r\n        let id = \"id\" + Math.random().toString(16).slice(2)\r\n        let obj = { id: id, email: emailvalue, password: passvalue, name: namevalue }\r\n        prop.saved(obj)\r\n        // console.log(id);\r\n\r\n    }\r\n    return (\r\n        show && <Modal>\r\n            <div className={classes.sign}>\r\n                <form onSubmit={submithandle}>\r\n                    <div>\r\n                        <label>Enter your Email</label>\r\n                        <input onChange={emailvaluehandle} onBlur={emailistouched}></input>\r\n                        {emailisinvalid && <p style={{ color: 'red' }}> please enter valid email</p>}\r\n                    </div>\r\n                    <div>\r\n                        <label>Enter your Username</label>\r\n                        <input onChange={namevaluehandle} onBlur={nameistouched}></input>\r\n                        {nameisinvalid && <p style={{ color: 'red' }}>please enter valid name</p>}\r\n                    </div>\r\n                    <div>\r\n                        <label>Enter your password</label>\r\n                        <input onChange={passvaluehandle} onBlur={passistouched}></input>\r\n                        {passisinvalid && <p style={{ color: 'red' }}>please enter valid password</p>}\r\n                    </div>\r\n                    <button onClick={modalhandle} style={{ margin: '10px' }}>Close</button>\r\n                    <button>Signin</button>\r\n                </form>\r\n            </div>\r\n        </Modal>\r\n\r\n\r\n\r\n    )\r\n}\r\nexport default Signin","C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\components\\UI\\Modal\\modal.js",[],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\context\\contextprovider.js",[],"C:\\visiual codes\\Forkify\\React_prac\\reactredux\\src\\context\\contextdata.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"84","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":15},{"ruleId":"80","severity":1,"message":"85","line":9,"column":10,"nodeType":"82","messageId":"83","endLine":9,"endColumn":20},{"ruleId":"80","severity":1,"message":"86","line":9,"column":22,"nodeType":"82","messageId":"83","endLine":9,"endColumn":35},{"ruleId":"80","severity":1,"message":"87","line":25,"column":9,"nodeType":"82","messageId":"83","endLine":25,"endColumn":13},{"ruleId":"80","severity":1,"message":"88","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":21},{"ruleId":"80","severity":1,"message":"89","line":37,"column":137,"nodeType":"82","messageId":"83","endLine":37,"endColumn":149},{"ruleId":"80","severity":1,"message":"90","line":37,"column":163,"nodeType":"82","messageId":"83","endLine":37,"endColumn":175},{"ruleId":"80","severity":1,"message":"91","line":38,"column":133,"nodeType":"82","messageId":"83","endLine":38,"endColumn":144},{"ruleId":"80","severity":1,"message":"92","line":38,"column":158,"nodeType":"82","messageId":"83","endLine":38,"endColumn":169},{"ruleId":"93","severity":1,"message":"94","line":41,"column":46,"nodeType":"95","messageId":"96","endLine":41,"endColumn":48},{"ruleId":"93","severity":1,"message":"94","line":45,"column":22,"nodeType":"95","messageId":"96","endLine":45,"endColumn":24},{"ruleId":"80","severity":1,"message":"97","line":52,"column":9,"nodeType":"82","messageId":"83","endLine":52,"endColumn":22},{"ruleId":"80","severity":1,"message":"89","line":12,"column":139,"nodeType":"82","messageId":"83","endLine":12,"endColumn":151},{"ruleId":"80","severity":1,"message":"90","line":12,"column":165,"nodeType":"82","messageId":"83","endLine":12,"endColumn":177},{"ruleId":"80","severity":1,"message":"98","line":13,"column":135,"nodeType":"82","messageId":"83","endLine":13,"endColumn":146},{"ruleId":"80","severity":1,"message":"99","line":13,"column":160,"nodeType":"82","messageId":"83","endLine":13,"endColumn":171},{"ruleId":"93","severity":1,"message":"100","line":13,"column":200,"nodeType":"95","messageId":"96","endLine":13,"endColumn":202},{"ruleId":"80","severity":1,"message":"91","line":14,"column":135,"nodeType":"82","messageId":"83","endLine":14,"endColumn":146},{"ruleId":"80","severity":1,"message":"92","line":14,"column":160,"nodeType":"82","messageId":"83","endLine":14,"endColumn":171},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Counter' is defined but never used.","'authaction' is defined but never used.","'counteraction' is defined but never used.","'data' is assigned a value but never used.","'createStore' is defined but never used.","'emailisvalid' is assigned a value but never used.","'emailisreset' is assigned a value but never used.","'passisvalid' is assigned a value but never used.","'passisreset' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'formisinvalid' is assigned a value but never used.","'nameisvalid' is assigned a value but never used.","'nameisreset' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]