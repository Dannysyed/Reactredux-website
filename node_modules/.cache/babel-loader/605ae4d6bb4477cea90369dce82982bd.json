{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\nlet counterstate = {\n  counter: 0,\n  isshown: true\n};\nlet authstate = {\n  IsAuthenticated: false\n};\nlet AuthSlice = createSlice({\n  name: 'auth',\n  initialState: authstate,\n  reducers: {\n    login(state, action) {\n      state.IsAuthenticated = true;\n    },\n\n    logout(state, action) {\n      state.IsAuthenticated = false;\n    }\n\n  }\n});\nlet counterSlice = createSlice({\n  name: 'counter',\n  initialState: counterstate,\n  reducers: {\n    increment(state) {\n      state.counter = state.counter + 1;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggler(state) {\n      state.isshown = !state.isshown;\n    }\n\n  }\n});\nlet store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: AuthSlice.reducer\n  }\n}); // using redux as reducer\n// let Reducerfunction = (state = statedata, action) => {\n//     if (action.type == 'increment') {\n//         return { counter: state.counter + 1, isshown: state.isshown }\n//     }\n//     if (action.type == 'decrement') {\n//         return { counter: state.counter - 1, isshown: state.isshown }\n//     }\n//     if (action.type == 'custom') {\n//         return { counter: state.counter + action.payload, isshown: state.isshown }\n//     }\n//     if (action.type == 'toggle') {\n//         return { counter: state.counter, isshown: !state.isshown, }\n//     }\n//     return {\n//         counter: state.counter, isshown: state.isshown\n//     }\n// }\n// let store = createStore(Reducerfunction)\n// let subscriptionfn = () => {\n//     console.log(store.getState());\n// }\n// store.subscribe(subscriptionfn)\n// store.dispatch({ type: 'increment' })\n\nexport let counteraction = counterSlice.actions;\nexport let authaction = AuthSlice.actions;\nexport default store;","map":{"version":3,"sources":["C:/visiual codes/Forkify/React_prac/reactredux/src/store/index.js"],"names":["createStore","configureStore","createSlice","counterstate","counter","isshown","authstate","IsAuthenticated","AuthSlice","name","initialState","reducers","login","state","action","logout","counterSlice","increment","decrement","increase","payload","toggler","store","reducer","auth","counteraction","actions","authaction"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAEA,IAAIC,YAAY,GAChB;AACIC,EAAAA,OAAO,EAAE,CADb;AAEIC,EAAAA,OAAO,EAAE;AAFb,CADA;AAKA,IAAIC,SAAS,GAAG;AACZC,EAAAA,eAAe,EAAE;AADL,CAAhB;AAGA,IAAIC,SAAS,GAAGN,WAAW,CAAC;AACxBO,EAAAA,IAAI,EAAE,MADkB;AAExBC,EAAAA,YAAY,EAAEJ,SAFU;AAGxBK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACN,eAAN,GAAwB,IAAxB;AAA8B,KAD/C;;AAENQ,IAAAA,MAAM,CAACF,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACN,eAAN,GAAwB,KAAxB;AAA+B;;AAFjD;AAHc,CAAD,CAA3B;AAQA,IAAIS,YAAY,GAAGd,WAAW,CAAC;AAC3BO,EAAAA,IAAI,EAAE,SADqB;AAE3BC,EAAAA,YAAY,EAAEP,YAFa;AAG3BQ,EAAAA,QAAQ,EAAE;AACNM,IAAAA,SAAS,CAACJ,KAAD,EAAQ;AAAEA,MAAAA,KAAK,CAACT,OAAN,GAAgBS,KAAK,CAACT,OAAN,GAAgB,CAAhC;AAAmC,KADhD;;AAENc,IAAAA,SAAS,CAACL,KAAD,EAAQ;AAAEA,MAAAA,KAAK,CAACT,OAAN;AAAiB,KAF9B;;AAGNe,IAAAA,QAAQ,CAACN,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACT,OAAN,GAAgBS,KAAK,CAACT,OAAN,GAAgBU,MAAM,CAACM,OAAvC;AAAgD,KAHpE;;AAINC,IAAAA,OAAO,CAACR,KAAD,EAAQ;AAAEA,MAAAA,KAAK,CAACR,OAAN,GAAgB,CAACQ,KAAK,CAACR,OAAvB;AAAgC;;AAJ3C;AAHiB,CAAD,CAA9B;AAWA,IAAIiB,KAAK,GAAGrB,cAAc,CAAC;AACvBsB,EAAAA,OAAO,EAAE;AAAEnB,IAAAA,OAAO,EAAEY,YAAY,CAACO,OAAxB;AAAiCC,IAAAA,IAAI,EAAEhB,SAAS,CAACe;AAAjD;AADc,CAAD,CAA1B,C,CAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AACA,OAAO,IAAIE,aAAa,GAAGT,YAAY,CAACU,OAAjC;AACP,OAAO,IAAIC,UAAU,GAAGnB,SAAS,CAACkB,OAA3B;AAEP,eAAeJ,KAAf","sourcesContent":["import { createStore } from 'redux'\r\nimport { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\nlet counterstate =\r\n{\r\n    counter: 0,\r\n    isshown: true\r\n}\r\nlet authstate = {\r\n    IsAuthenticated: false\r\n}\r\nlet AuthSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: authstate,\r\n    reducers: {\r\n        login(state, action) { state.IsAuthenticated = true },\r\n        logout(state, action) { state.IsAuthenticated = false }\r\n    }\r\n})\r\nlet counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: counterstate,\r\n    reducers: {\r\n        increment(state) { state.counter = state.counter + 1 },\r\n        decrement(state) { state.counter-- },\r\n        increase(state, action) { state.counter = state.counter + action.payload },\r\n        toggler(state) { state.isshown = !state.isshown },\r\n\r\n    }\r\n})\r\nlet store = configureStore({\r\n    reducer: { counter: counterSlice.reducer, auth: AuthSlice.reducer }\r\n})\r\n// using redux as reducer\r\n\r\n// let Reducerfunction = (state = statedata, action) => {\r\n//     if (action.type == 'increment') {\r\n\r\n//         return { counter: state.counter + 1, isshown: state.isshown }\r\n//     }\r\n//     if (action.type == 'decrement') {\r\n//         return { counter: state.counter - 1, isshown: state.isshown }\r\n//     }\r\n//     if (action.type == 'custom') {\r\n//         return { counter: state.counter + action.payload, isshown: state.isshown }\r\n\r\n//     }\r\n//     if (action.type == 'toggle') {\r\n\r\n//         return { counter: state.counter, isshown: !state.isshown, }\r\n//     }\r\n\r\n\r\n//     return {\r\n//         counter: state.counter, isshown: state.isshown\r\n//     }\r\n// }\r\n// let store = createStore(Reducerfunction)\r\n\r\n// let subscriptionfn = () => {\r\n//     console.log(store.getState());\r\n\r\n// }\r\n// store.subscribe(subscriptionfn)\r\n// store.dispatch({ type: 'increment' })\r\nexport let counteraction = counterSlice.actions\r\nexport let authaction = AuthSlice.actions\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}