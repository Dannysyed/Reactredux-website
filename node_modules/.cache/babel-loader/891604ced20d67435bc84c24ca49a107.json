{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\nlet statedata = {\n  counter: 0,\n  isshown: true\n};\nlet counterSlice = createSlice({\n  name: 'counter',\n  initialState: statedata,\n  reducers: {\n    increment(state) {\n      state.counter = state.counter + 1;\n    },\n\n    decrement(state) {\n      state.counter = state.counter - 1;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggler(state) {\n      state.isshown = !state.isshown;\n    }\n\n  }\n});\nlet store = configureStore({\n  reducer: counterSlice.reducer\n}); // using redux as reducer\n// let Reducerfunction = (state = statedata, action) => {\n//     if (action.type == 'increment') {\n//         return { counter: state.counter + 1, isshown: state.isshown }\n//     }\n//     if (action.type == 'decrement') {\n//         return { counter: state.counter - 1, isshown: state.isshown }\n//     }\n//     if (action.type == 'custom') {\n//         return { counter: state.counter + action.payload, isshown: state.isshown }\n//     }\n//     if (action.type == 'toggle') {\n//         return { counter: state.counter, isshown: !state.isshown, }\n//     }\n//     return {\n//         counter: state.counter, isshown: state.isshown\n//     }\n// }\n// let store = createStore(Reducerfunction)\n// let subscriptionfn = () => {\n//     console.log(store.getState());\n// }\n// store.subscribe(subscriptionfn)\n// store.dispatch({ type: 'increment' })\n\nexport let counteraction = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["C:/visiual codes/Forkify/React_prac/reactredux/src/store/index.js"],"names":["createStore","configureStore","createSlice","statedata","counter","isshown","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggler","store","reducer","counteraction","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAEA,IAAIC,SAAS,GACb;AACIC,EAAAA,OAAO,EAAE,CADb;AAEIC,EAAAA,OAAO,EAAE;AAFb,CADA;AAKA,IAAIC,YAAY,GAAGJ,WAAW,CAAC;AAC3BK,EAAAA,IAAI,EAAE,SADqB;AAE3BC,EAAAA,YAAY,EAAEL,SAFa;AAG3BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAAEA,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgB,CAAhC;AAAmC,KADhD;;AAENQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AAAEA,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgB,CAAhC;AAAmC,KAFhD;;AAGNS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AAAEH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AAAgD,KAHpE;;AAINC,IAAAA,OAAO,CAACL,KAAD,EAAQ;AAAEA,MAAAA,KAAK,CAACN,OAAN,GAAgB,CAACM,KAAK,CAACN,OAAvB;AAAgC;;AAJ3C;AAHiB,CAAD,CAA9B;AAWA,IAAIY,KAAK,GAAGhB,cAAc,CAAC;AACvBiB,EAAAA,OAAO,EAAEZ,YAAY,CAACY;AADC,CAAD,CAA1B,C,CAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAGb,YAAY,CAACc,OAAjC;AAEP,eAAeH,KAAf","sourcesContent":["import { createStore } from 'redux'\r\nimport { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\nlet statedata =\r\n{\r\n    counter: 0,\r\n    isshown: true\r\n}\r\nlet counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: statedata,\r\n    reducers: {\r\n        increment(state) { state.counter = state.counter + 1 },\r\n        decrement(state) { state.counter = state.counter - 1 },\r\n        increase(state, action) { state.counter = state.counter + action.payload },\r\n        toggler(state) { state.isshown = !state.isshown },\r\n\r\n    }\r\n})\r\nlet store = configureStore({\r\n    reducer: counterSlice.reducer\r\n})\r\n// using redux as reducer\r\n\r\n// let Reducerfunction = (state = statedata, action) => {\r\n//     if (action.type == 'increment') {\r\n\r\n//         return { counter: state.counter + 1, isshown: state.isshown }\r\n//     }\r\n//     if (action.type == 'decrement') {\r\n//         return { counter: state.counter - 1, isshown: state.isshown }\r\n//     }\r\n//     if (action.type == 'custom') {\r\n//         return { counter: state.counter + action.payload, isshown: state.isshown }\r\n\r\n//     }\r\n//     if (action.type == 'toggle') {\r\n\r\n//         return { counter: state.counter, isshown: !state.isshown, }\r\n//     }\r\n\r\n\r\n//     return {\r\n//         counter: state.counter, isshown: state.isshown\r\n//     }\r\n// }\r\n// let store = createStore(Reducerfunction)\r\n\r\n// let subscriptionfn = () => {\r\n//     console.log(store.getState());\r\n\r\n// }\r\n// store.subscribe(subscriptionfn)\r\n// store.dispatch({ type: 'increment' })\r\nexport let counteraction = counterSlice.actions\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}